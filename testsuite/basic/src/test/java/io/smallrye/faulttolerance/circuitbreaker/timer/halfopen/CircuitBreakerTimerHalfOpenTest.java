package io.smallrye.faulttolerance.circuitbreaker.timer.halfopen;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.concurrent.atomic.AtomicInteger;

import javax.inject.Inject;

import org.junit.jupiter.api.Test;

import io.smallrye.faulttolerance.api.CircuitBreakerMaintenance;
import io.smallrye.faulttolerance.api.CircuitBreakerState;
import io.smallrye.faulttolerance.util.FaultToleranceBasicTest;

@FaultToleranceBasicTest
public class CircuitBreakerTimerHalfOpenTest {
    @Inject
    private HelloService service;

    @Inject
    private CircuitBreakerMaintenance cb;

    @Test
    public void circuitBreakerMovesToHalfOpenWithoutInvocations() throws InterruptedException {
        AtomicInteger stateChanges = new AtomicInteger(0);
        cb.onStateChange("hello", ignored -> stateChanges.incrementAndGet());

        // closed
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.CLOSED);

        for (int i = 0; i < HelloService.ROLLING_WINDOW; i++) {
            assertThatThrownBy(() -> service.hello(true))
                    .isExactlyInstanceOf(IllegalArgumentException.class);
        }

        // open
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.OPEN);

        Thread.sleep(HelloService.DELAY * 3);

        // half-open
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.HALF_OPEN);

        assertThat(service.hello(false)).isEqualTo("Hello, world!");

        // closed
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.CLOSED);

        assertThat(stateChanges).hasValue(3);
    }
}
