package io.smallrye.faulttolerance.async.compstage.circuit.breaker.timer.halfopen;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

import jakarta.inject.Inject;

import org.junit.jupiter.api.Test;

import io.smallrye.faulttolerance.api.CircuitBreakerMaintenance;
import io.smallrye.faulttolerance.api.CircuitBreakerState;
import io.smallrye.faulttolerance.util.FaultToleranceBasicTest;

@FaultToleranceBasicTest
public class CompletionStageCircuitBreakerTimerHalfOpenTest {
    @Inject
    private AsyncHelloService service;

    @Inject
    private CircuitBreakerMaintenance cb;

    @Test
    public void circuitBreakerMovesToHalfOpenWithoutInvocations() throws InterruptedException, ExecutionException {
        AtomicInteger stateChanges = new AtomicInteger(0);
        cb.onStateChange("hello", ignored -> stateChanges.incrementAndGet());

        // closed
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.CLOSED);

        for (int i = 0; i < AsyncHelloService.ROLLING_WINDOW; i++) {
            assertThatThrownBy(() -> service.hello(true).toCompletableFuture().get())
                    .isExactlyInstanceOf(ExecutionException.class)
                    .hasCauseExactlyInstanceOf(IllegalArgumentException.class);
        }

        // open
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.OPEN);

        Thread.sleep(AsyncHelloService.DELAY * 3);

        // half-open
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.HALF_OPEN);

        assertThat(service.hello(false).toCompletableFuture().get()).isEqualTo("Hello, world!");

        // closed
        assertThat(cb.currentState("hello")).isEqualTo(CircuitBreakerState.CLOSED);

        assertThat(stateChanges).hasValue(3);
    }
}
